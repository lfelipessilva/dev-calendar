'use client'
import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import clsx from 'clsx'
import { add, differenceInMilliseconds, differenceInMinutes, format, isEqual, startOfWeek, sub } from 'date-fns'
import { ptBR as ptBRLocale } from 'date-fns/locale'
import { CreateAvailableTimeModal } from "@/components/modals/CreateAvailableTimeModal";

const stateEvent = [
  {
    id: 1,
    start: new Date("May 8, 2023 16:30:00"),
    end: new Date("May 8, 2023 20:00:00"),
    name: 'task tal'
  },
  {
    id: 2,
    start: new Date("May 11, 2023 12:30:00"),
    end: new Date("May 11, 2023 18:00:00"),
    name: 'task tal'
  },
  {
    id: 3,
    start: new Date("May 10, 2023 11:50:00"),
    end: new Date("May 10, 2023 13:30:00"),
    name: 'task tal'
  },
  {
    id: 4,
    start: new Date("May 13, 2023 14:00:00"),
    end: new Date("May 13, 2023 17:15:00"),
    name: 'task tal'
  }
]

export default function Home<NextPage>() {
  const [selectedWeek, setSelectedWeek] = useState(startOfWeek(new Date('May 10, 2023 03:24:00')))
  const [hours, setHours] = useState([8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])
  const [days, setDays] = useState([
    add(selectedWeek, { days: 0 }),
    add(selectedWeek, { days: 1 }),
    add(selectedWeek, { days: 2 }),
    add(selectedWeek, { days: 3 }),
    add(selectedWeek, { days: 4 }),
    add(selectedWeek, { days: 5 }),
    add(selectedWeek, { days: 6 }),
  ])
  const [events, setEvents] = useState(stateEvent)
  const [openCreateAvailableTimeModal, setOpenCreateAvailableTimeModal] = useState(false)
  const [draggingEventId, setDraggingEventId] = useState<any>({})

  const handleDragEnter = (e: any, id: number) => {
    e.preventDefault();
    e.stopPropagation();
    setDraggingEventId(id)
  };

  const handleDragLeave = (e: any) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDragOver = (e: any, now: any) => {
    e.preventDefault();
    e.stopPropagation();
    const newEvents = events.map((event) => {
      if (event.id === draggingEventId) {
        const eventDuration = differenceInMinutes(event.end, event.start)

        const newEnd = new Date(add(now, { minutes: eventDuration }))
        const newStart = new Date(now)

        return { ...event, start: newStart, end: newEnd };
      }
      return event;
    });
    setEvents(newEvents)
  };
  const handleDrop = (e: any) => {
    e.preventDefault();
    e.stopPropagation();
    setDraggingEventId({})
  };

  return (
    <>
      <Head>
        <title>Dev Calendar</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Dev Calendar</h1>
      <main className="min-h-screen flex flex-col items-center justify-center bg-slate-950 text-white">
        <div className="text-4xl">
          Semana
        </div>
        <div className="grid grid-flow-col grid-cols-7 w-full justify-evenly">
          {days.map((day, dayIndex) => {
            return (
              <div className="grid bg-slate-500" key={dayIndex}>
                <div>{format(day, 'E', { locale: ptBRLocale })}</div>
                {hours.map((hour, index) => {
                  const now = add(selectedWeek, { days: dayIndex, hours: hour })

                  const { isEventStart, isEventEnd, timeInElement, event } = findIfIsInEvent(now, events)

                  const eventHeight = findEventHeight(timeInElement)

                  return (
                    <div
                      key={index}
                      className="flex h-12 bg-slate-500 text-black text-center border border-black border-opacity-20"
                      onDragOver={e => handleDragOver(e, now)}
                      onDragLeave={e => handleDragLeave(e)}
                    >
                      {!!event &&
                        <div
                          key={index}
                          className={clsx(
                            "w-[98%] bg-slate-400 text-black text-left",
                            isEventStart && 'rounded-t-lg',
                            isEventEnd && 'rounded-b-lg',
                          )}
                          style={{ height: `${eventHeight}%`, marginTop: isEventStart ? 'auto' : '', marginBottom: isEventEnd ? 'auto' : '' }}
                          draggable
                          onDragOver={e => handleDragOver(e, now)}
                          onDragEnter={e => handleDragEnter(e, event.id)}
                          onDrop={e => handleDrop(e)}
                        >
                          {!!isEventStart && event?.name}
                        </div>
                      }
                    </div>
                  )

                })}
              </div>
            )
          }
          )}
        </div>
      </main>
      <CreateAvailableTimeModal open={openCreateAvailableTimeModal} onOpenChange={setOpenCreateAvailableTimeModal} />
    </>
  );
};

const findEventHeight = (inElementTime: any) => {
  return inElementTime / 60 * 100
}

const findIfIsInEvent = (now: any, events: any) => {
  const [event] = events.filter((event: any) => isInEventEnd(event.end, now) || isInEventStart(event.start, now) || isInEventMiddle(event.start, event.end, now))

  if (!event) {
    return {
      isEventStart: false,
      isEventEnd: false,
      timeInElement: 0
    }
  }

  let timeInElement = 60
  const isEventStart = isInEventStart(event.start, now)
  const isEventEnd = isInEventEnd(event.end, now)

  if (isEventStart) {
    timeInElement = Math.abs(differenceInMinutes(new Date(event.start), new Date(now)))
    if (timeInElement === 0) timeInElement = 60 // cases where the event starts exactly at the start of the time
  }

  if (isEventEnd) {
    timeInElement = Math.abs(differenceInMinutes(new Date(event.end), new Date(now)))
  }

  return {
    isEventStart,
    isEventEnd,
    timeInElement,
    event
  }
}

const isInEventStart = (startTime: any, now: any) => format(new Date(startTime), 'dd-HH') === format(new Date(now), 'dd-HH')
// evento começa ás 14, e hora igual 14
// event começar 14:13, e hora igual 14

const isInEventEnd = (endTime: any, now: any) => format(sub(new Date(endTime), { minutes: 1 }), 'dd-HH') === format(new Date(now), 'dd-HH')
// evento termina 15:34, e hora igual 15
// event termina 16:00, e hora igual a 15

const isInEventMiddle = (eventStart: any, eventEnd: any, now: any) => sub(new Date(eventEnd), { minutes: 1 }) > new Date(now) && new Date(eventStart) < new Date(now)
