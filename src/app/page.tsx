'use client'
import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import clsx from 'clsx'
import { add, differenceInMilliseconds, differenceInMinutes, format, isEqual, startOfWeek, sub } from 'date-fns'
import { ptBR as ptBRLocale } from 'date-fns/locale'
import { CreateAvailableTimeModal } from "@/components/modals/CreateAvailableTimeModal";

const stateEvent = [
  {
    id: 1,
    start: new Date("May 8, 2023 16:00:00"),
    end: new Date("May 8, 2023 18:00:00"),
    name: 'task tal'
  },
  {
    id: 2,
    start: new Date("May 11, 2023 12:00:00"),
    end: new Date("May 11, 2023 18:00:00"),
    name: 'task tal'
  }
]

export default function Home<NextPage>() {
  const [selectedWeek, setSelectedWeek] = useState(startOfWeek(new Date('May 10, 2023 03:24:00')))
  const [hours, setHours] = useState([8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])
  const [days, setDays] = useState([
    add(selectedWeek, { days: 0 }),
    add(selectedWeek, { days: 1 }),
    add(selectedWeek, { days: 2 }),
    add(selectedWeek, { days: 3 }),
    add(selectedWeek, { days: 4 }),
    add(selectedWeek, { days: 5 }),
    add(selectedWeek, { days: 6 }),
  ])
  const [events, setEvents] = useState(stateEvent)
  const [openCreateAvailableTimeModal, setOpenCreateAvailableTimeModal] = useState(false)
  const [draggingEventId, setDraggingEventId] = useState<any>({})



  const availableHours = [
    {
      start: new Date("May 8, 2023 13:00:00"),
      end: new Date("May 8, 2023 20:00:00"),
    },
    {
      start: new Date("May 9, 2023 9:00:00"),
      end: new Date("May 9, 2023 13:00:00"),
    },
    {
      start: new Date("May 10, 2023 10:00:00"),
      end: new Date("May 10, 2023 14:00:00"),
    },
    {
      start: new Date("May 10, 2023 17:00:00"),
      end: new Date("May 10, 2023 21:00:00"),
    },
    {
      start: new Date("May 11, 2023 11:00:00"),
      end: new Date("May 11, 2023 20:00:00"),
    },
    {
      start: new Date("May 12, 2023 08:00:00"),
      end: new Date("May 12, 2023 20:00:00"),
    },
  ]

  const handleDragEnter = (e: any, id: number) => {
    e.preventDefault();
    e.stopPropagation();
    console.log(e);
    setDraggingEventId(id)
  };
  const handleDragLeave = (e: any) => {
    e.preventDefault();
    e.stopPropagation();
    e.target.style.backgroundColor = 'red'
  };
  const handleDragOver = (e: any, now: any) => {
    e.preventDefault();
    e.stopPropagation();
    const newEvents = events.map((event) => {
      if (event.id === draggingEventId) {
        const eventDuration = differenceInMinutes(event.end, event.start)

        const newEnd = new Date(add(now, { minutes: eventDuration }))
        const newStart = new Date(now)

        return { ...event, start: newStart, end: newEnd };
      }
      return event;
    });
    setEvents(newEvents)
  };
  const handleDrop = (e: any) => {
    e.preventDefault();
    e.stopPropagation();
  };

  return (
    <>
      <Head>
        <title>Dev Calendar</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Dev Calendar</h1>
      <main className="min-h-screen flex flex-col items-center justify-center bg-slate-950 text-white">
        <div className="text-4xl">
          Semana
        </div>
        <div className="flex w-4/5 justify-evenly">
          {days.map((day, dayIndex) => {
            return (
              <div className="flex flex-col w-full justify-evenly text-center bg-slate-500" key={dayIndex}>
                <div>{format(day, 'EEEE', { locale: ptBRLocale })}</div>
                {hours.map((hour, index) => {
                  const now = add(selectedWeek, { days: dayIndex, hours: hour })
                  const [event] = events.filter(event => new Date(event.start) <= new Date(now) && new Date(event.end) > new Date(now))

                  const isEventStart = event && isEqual(new Date(event?.start), new Date(now))
                  const isEventEnd = event && isEqual(new Date(event?.end), add(new Date(now), { hours: 1 }))

                  if (event) {
                    return (
                      <div
                        key={index}
                        className={clsx(
                          "w-60 h-12 bg-slate-400 text-black text-center",
                          isEventStart && 'rounded-t-lg',
                          isEventEnd && 'rounded-b-lg'
                        )}
                        draggable
                        onDragOver={e => handleDragOver(e, now)}
                        onDragEnter={e => handleDragEnter(e, event.id)}
                      >
                        {!!isEventStart && event?.name}
                      </div>
                    )
                  }

                  return (
                    // blank hour
                    <div
                      key={index}
                      className="h-12 bg-slate-500 text-black text-center border border-black border-opacity-20"
                      onDragOver={e => handleDragOver(e, now)}
                      onDragLeave={e => handleDragLeave(e)}
                      style={{ background: 'red' }}
                    />
                  )

                })}
              </div>
            )
          }
          )}
        </div>
      </main>
      <CreateAvailableTimeModal open={openCreateAvailableTimeModal} onOpenChange={setOpenCreateAvailableTimeModal} />
    </>
  );
};